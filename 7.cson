createdAt: "2018-05-04T17:35:16.658Z"
updatedAt: "2018-05-05T07:50:42.917Z"
type: "SNIPPET_NOTE"
folder: "8121e771b5582b371f1f"
title: "Java Script 3"
description: "Java Script 3"
snippets: [
  {
    name: "Comparision with equality operator"
    mode: "text"
    content: '''
      // There are many comparision operators in JS. All of these return a boolean true or false value.
      
      // THe equality operator == compares two values and return true if they are equivivalent or false it //not.
      
      //Note that equality is different from assignment (=), which assigns the value at the right of the //operator to a variable in the left.
      
      function equalityTest(myVal) {
        if (myVal == 10) {
           return "Equal";
        }
        return "Not Equal";
      }
      
      If myVal is equal to 10, the equality operator returns true, so the code in the curly braces will execute, and the function will return "Equal". Otherwise, the function will return "Not Equal".
      
      In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. Once it does, however, it can compare terms as follows:
      
         1   ==  1    // true
         1   ==  2    // false
         1   == '1'   // true
        "3"  ==  3    // true
      
    '''
  }
  {
    name: "Comparision with strict equality operator"
    mode: "Plain Text"
    content: '''
      //Strict equality (===) is the counterpart to the equality operator (==). Unlike the equality operator, strict equality tests both the data type and value of the compared elements.
      Examples
      3 === 3   // true
      3 === '3' // false
      In the second example, 3 is a Number type and '3' is a String type.
    '''
  }
  {
    name: "Comparision with inequality operator"
    mode: "Plain Text"
    content: '''
      /* The inequality operator (!=) is the opposite of the equality operator. It means "Not Equal" and returns false where equality would return true and vice versa. Like the equality operator, the inequality operator will convert data types of values while comparing.
      */
      
      Examples
      1 != 2      // true
      1 != "1"    // false
      1 != '1'    // false
      1 != true   // false
      0 != false  // false
    '''
  }
  {
    name: "Comparision with strict inequality operator"
    mode: "Plain Text"
    content: '''
      //Strict inequality operator is the opposite of the strict equality operator. !==
      //"Strictly Not Equal" and returns false where strict equality would return true and vice versa. Strict inequality will not convert data types.
      Examples
      3 !== 3   // false
      3 !== '3' // true
      4 !== 3   // true
      
      
    '''
  }
  {
    name: "Greater than operator"
    mode: "Plain Text"
    content: '''
      // The greater than operator  ( > ) compares the value of two numbers.
      //It's true when the number to left is greater than number to the right.
      
      //It will convert data types of values while comparing.
      
      Examples
       5 > 3   // true
       7 > '3' // true
       2 > 3   // false
      '1' > 9  // false
      
      
    '''
  }
  {
    name: "Greater than or equalt o operator"
    mode: "Plain Text"
    content: '''
      //The greater than or equal to operator (>=) compares the values of two numbers. If the number //to the left is greater than or equal to the number to the right, it returns true.
      
      //Like the equality operator, greater than or equal to operator will convert data types while //comparing.
      
      Examples
       6  >=  6  // true
       7  >= '3' // true
       2  >=  3  // false
      '7' >=  9  // false
      
      
    '''
  }
  {
    name: "Less tahn and less tahn equal to"
    mode: "Plain Text"
    content: '''
      The less than operator (<) compares the values of two numbers. If the number to the left is less than the number to the right, it returns true.
      less than operator converts data types while comparing.
      
      Examples
        2 < 5  // true
      '3' < 7  // true
        5 < 5  // false
        3 < 2  // false
      '8' < 4  // false
      
      //LESS THAN OR EQUAL TO
      
      //he less than or equal to operator (<=) compares the values of two numbers. If the number to the left is less than or equal the number to the right, it returns true.
      Like the equality operator, less than or equal to converts data types.
      
      Examples
        4 <= 5  // true
      '7' <= 7  // true
        5 <= 5  // true
        3 <= 2  // false
      '8' <= 4  // false
      
      
      
      
      
    '''
  }
  {
    name: "logical  and operators"
    mode: "Plain Text"
    content: '''
      //The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
      The same effect could be achieved by nesting an if statement inside another if:
      if (num > 5) {
        if (num < 10) {
          return "Yes";
        }
      }
      return "No";
      will only return "Yes" if num is between 6 and 9 (6 and 9 included). The same logic can be written as:
      if (num > 5 && num < 10) {
        return "Yes";
      }
      return "No";
    '''
  }
  {
    name: "Logical Or operator"
    mode: "Plain Text"
    content: '''
      //The logical or operator (||) returns true if either of the operands is true
      
      he pattern below should look familiar from prior waypoints:
      if (num > 10) {
        return "No";
      }
      if (num < 5) {
        return "No";
      }
      return "Yes";
      will return "Yes" only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:
      if (num > 10 || num < 5) {
        return "No";
      }
      return "Yes";
      
      
      
    '''
  }
  {
    name: "Else statements"
    mode: "Plain Text"
    content: '''
      //When a condition for an if statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an else statement, an alternate block of code can be executed.
      if (num > 10) {
        return "Bigger than 10";
      } else {
        return "10 or Less";
      }
      
      
    '''
  }
  {
    name: "else if statements"
    mode: "Plain Text"
    content: '''
      //If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.
      if (num > 15) {
        return "Bigger than 15";
      } else if (num < 5) {
        return "Smaller than 5";
      } else {
        return "Between 5 and 15";
      }
      
      
    '''
  }
  {
    name: "logical order in if else statements"
    mode: "Plain Text"
    content: '''
      // Order is important in if, else if statements
      // The loop is executed from top to bottom so you want to be careful of what statement comes //first.
      
      Here's the first:
      function foo(x) {
        if (x < 1) {
          return "Less than one";
        } else if (x < 2) {
          return "Less than two";
        } else {
          return "Greater than or equal to two";
        }
      }
      And the second just switches the order of the statements:
      function bar(x) {
        if (x < 2) {
          return "Less than two";
        } else if (x < 1) {
          return "Less than one";
        } else {
          return "Greater than or equal to two";
        }
      }
      While these two functions look nearly identical if we pass a number to both we get different outputs.
      foo(0) // "Less than one"
      bar(0) // "Less than two"
    '''
  }
  {
    name: "Chaining if else statements"
    mode: "Plain Text"
    content: '''
      //if/else statements can be chained together for complex logic. Here is pseudocode of multiple chained if / else if statements:
      if (condition1) {
        statement1
      } else if (condition2) {
        statement2
      } else if (condition3) {
        statement3
      . . .
      } else {
        statementN
      }
    '''
  }
  {
    name: "Switch statements"
    mode: "Plain Text"
    content: '''
      // If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which defines various possible values. Statements are executed from the first matched case value until a break is encountered.
      Here is a pseudocode example:
      switch (num) {
        case value1:
          statement1;
          break;
        case value2:
          statement2;
          break;
      ...
        case valueN:
          statementN;
          break;
      }
      case values are tested with strict equality (===). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.
      
      
      var expr = 'Papayas';
      switch (expr) {
        case 'Oranges':
          console.log('Oranges are $0.59 a pound.');
          break;
        case 'Mangoes':
        case 'Papayas':
          console.log('Mangoes and papayas are $2.79 a pound.');
          // expected output: "Mangoes and papayas are $2.79 a pound."
          break;
        default:
          console.log('Sorry, we are out of ' + expr + '.');
      }
      
    '''
  }
  {
    name: "Switch statement 2"
    mode: "Plain Text"
    content: '''
      //In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think of it like the final else statement in an if/else chain.
      A default statement should be the last case.
      switch (num) {
        case value1:
          statement1;
          break;
        case value2:
          statement2;
          break;
      ...
        default:
          defaultStatement;
      }
      
      
      //MULTIPLE  IDENTICAL OPTIONS IN SWITCH STATEMENTS
      
      //If the break statement is omitted from a switch statement's case, the following case statement(s) are executed until a break is encountered. If you have multiple inputs with the same output, you can represent them in a switch statement like this:
      switch(val) {
        case 1:
        case 2:
        case 3:
          result = "1, 2, or 3";
          break;
        case 4:
          result = "4 alone";
      }
      Cases for 1, 2, and 3 will all produce the same result.
    '''
  }
  {
    name: "Switch satement  3"
    mode: "Plain Text"
    content: '''
      // REPLACING If Else CHAINS BY Switch
      
      /If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:
      if (val === 1) {
        answer = "a";
      } else if (val === 2) {
        answer = "b";
      } else {
        answer = "c";
      }
      can be replaced with:
      switch (val) {
        case 1:
          answer = "a";
          break;
        case 2:
          answer = "b";
          break;
        default:
          answer = "c";
      }
    '''
  }
  {
    name: "Returning boolean values from functions"
    mode: "Plain Text"
    content: '''
      // All comparison operators return a boolean true or false value.
      
      //A common anti-pattern is to use an if/else statement to do a comparison and then return true/false:
      function isEqual(a,b) {
        if (a === b) {
          return true;
        } else {
          return false;
        }
      }
      
      
      //Since === returns true or false, we can return the result of the comparison:
      function isEqual(a,b) {
        return a === b;
      }
      
      
    '''
  }
  {
    name: "Return early Pattern for functions"
    mode: "Plain Text"
    content: '''
      //When a return statement is reached, the execution of the current function stops and control returns to the calling function.
      
      Example
      function myFun() {
        console.log("Hello");
        return "World";
        console.log("byebye")
      }
      myFun();
      The above outputs "Hello" to the console, returns "World", but "byebye" is never output, because the function exits at the return statement.
      
    '''
  }
  {
    name: "Counting cards"
    mode: "Plain Text"
    content: '''
      In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.
      Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.
      Count Change
      Cards
      +1
      2, 3, 4, 5, 6
      0
      7, 8, 9
      -1
      10, 'J', 'Q', 'K', 'A'
      You will write a card counting function. It will receive a card parameter and increment or decrement the global count variable according to the card's value (see table). The function will then return a string with the current count and the string "Bet" if the count is positive, or "Hold" if the count is zero or negative. The current count and the player's decision ("Bet" or "Hold") should be separated by a single space.
      Example Output
      "-3 Hold"
      "5 Bet"
      
      
      
      //CODE
      
      var count = 0; //Global variable
      
      function cc(card) {
        // Only change code below this line
        if(card == 2 || card == 3 || card == 4 || card == 5 || card == 6) 
        {
          count += 1;
          if(count > 0)  
          {
            return count + ' Bet' ;
          }  
          else{
             return count + ' Hold';
              }
         }
           
        else if(card == 7 || card == 8 || card == 9){
          count = count + 0;
          if(count > 0)  
          {
            return count + ' Bet' ;
          }  
          else{
             return count + ' Hold';
              }
        }
        
        else if (card == 10 || card == 'J' || card == 'Q' || card == 'K' || card == 'A') 
          {
            count -= 1 ;
            if(count > 0)  
          {
            return count + ' Bet' ;
          }  
          else{
             return count + ' Hold';
              }
          }
        // Only change code above this line
      }
      
      
      // Note: Only the last will display
      //cc(2);cc(3); //2
      cc(7); cc('K'); cc('A'); //-2
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
