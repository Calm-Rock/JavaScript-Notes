createdAt: "2018-04-27T06:49:25.656Z"
updatedAt: "2018-04-29T08:48:27.471Z"
type: "SNIPPET_NOTE"
folder: "8121e771b5582b371f1f"
title: "Bootstrap responsive design"
description: "Bootstrap responsive design"
snippets: [
  {
    name: "General"
    mode: "HTML"
    content: '''
      Bootstrap is a responsive CSS framework.
      Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name Responsive Design.
      With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.
      
      You can add Bootstrap to any app by adding the following code to the top of your HTML:
      <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
      
      To get started, we should nest all of our HTML in a div element with the class container-fluid.
      The 'class' to be used to refer to the responsive design will be "container-fluid"
      
      
      The btn-primary class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.
      Note that this button will still need the btn and btn-block classes.
        <button class="btn btn-block btn-primary">Like</button>
      
      Bootstrap comes with several pre-defined colors for buttons.
      
      The btn-info class is used to call attention to optional actions that the user can take.
        <button class="btn btn-block btn-info">Info</button>
      
      The btn-danger class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.
      
      
    '''
  }
  {
    name: "image adjustment"
    mode: "HTML"
    content: '''
      To make an image fit exaclty with your screen, we can use bootstrap's  "img-responsive" class in the image element.
        <img src="https://bit.ly/fcc-running-cats" class="img-responsive">
    '''
  }
  {
    name: "text stuff"
    mode: "Plain Text"
    content: '''
      We can center our heading element to make it look better. All we need to do is add the 'class '
      "text-center" to our h2 element.
      
      use "text-primary" class for giving a primary color to the text.
      
      
      
      
    '''
  }
  {
    name: "button"
    mode: "HTML"
    content: '''
      Bootstrap has its own styles for button elements, which look much better than the plain HTML ones.
      
            <button class = "btn">Like</button>
      
      your button elements with a class of btn are only as wide as the text that they contain. 
      
      By making them block elements with the additional class of btn-block, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a "new line" below the block.
      <button class="btn btn-block">Submit</button>
      This button would take up 100% of the available width.
      
      Note that these buttons still need the btn class.
      
      
    '''
  }
  {
    name: "Grid"
    mode: "HTML"
    content: '''
      Bootstrap uses a responsive grid system, which makes it easy to 
      'put elements into rows and specify each element's relative width.' 
      
      Most of Bootstrap's classes can be applied to a div element.
      
       col-md-* class is being used. Here, md means medium, and * is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.
       
       we'll use col-xs-*, where xs means extra small (like an extra-small mobile phone screen), and * is the number of columns specifying how many columns wide the element should be.
       
       Put the Like, Info and Delete buttons side-by-side by nesting all three of them within one 
      <div class="row"> element, 
        then each of them within a <div class="col-xs-4"> element.
       
       The row class is applied to a div, and the buttons themselves can be nested within it.
      
        <div class="row">
        <div class="col-xs-4"><button class="btn btn-block btn-primary">Like</button></div>
        <div class="col-xs-4"><button class="btn btn-block btn-info">Info</button></div>
        <div class="col-xs-4"><button class="btn btn-block btn-danger">Delete</button></div>
        </div>
    '''
  }
  {
    name: "span"
    mode: "HTML"
    content: '''
      You can use spans to create inline elements
      
      By using the span element, you can put several elements together, and even style different parts of the same element differently.
      Nest the word "love" in your "Things cats love" element below within a span element. Then give that span the class text-danger to make the text red.
      Here's how you would do this with the "Top 3 things cats hate" element:
      <p>Top 3 things cats <span class = "text-danger">hate:</span></p>
      
      
      
      
    '''
  }
  {
    name: "text and image nesting"
    mode: "HTML"
    content: '''
      <div class="row">
          <div class="col-xs-8">
            <h2 class="text-primary text-center">CatPhotoApp</h2>
          </div>
          <div class="col-xs-4">
            <a href="#"><img class="img-responsive thick-green-border" src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back. "></a>
          </div>
    '''
  }
  {
    name: "Font awesome"
    mode: "HTML"
    content: '''
      Font Awesome is a convenient library of icons. These icons are vector graphics, stored in the .svg file format. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.
      You can add Font Awesome to any app just by including it by adding the following code to the top of your HTML:
      <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"/>
      
      The i element was originally used to make other elements italic, but is now commonly used for icons. You add the Font Awesome classes to the i element to turn it into an icon, for example:
      <i class="fa fa-info-circle"></i>
      
      
      <button class="btn btn-block btn-primary"><i class="fa fa-thumbs-up">Like</i></button>
      
    '''
  }
  {
    name: "responsive Radio buttons and checkboxes"
    mode: "HTML"
    content: '''
      You can use Bootstrap's col-xs-* classes on form elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.
      
      <div class="row">
        <form action="/submit-cat-photo">
          <div class="col-xs-6"><label><input type="radio" name="indoor-outdoor"> Indoor</label></div>
          <div class="col-xs-6"><label><input type="radio" name="indoor-outdoor"> Outdoor</label></div>
          <div class="col-xs-6"><label><input type="checkbox" name="personality"> Loving</label></div>
          <div class="col-xs-6"><label><input type="checkbox" name="personality"> Lazy</label></div>
          <div class="col-xs-6"><label><input type="checkbox" name="personality"> Crazy</label></div>
          <input type="text" placeholder="cat photo URL" required>
          <button type="submit">Submit</button>
        </form>
        </div>
    '''
  }
  {
    name: "form-control"
    mode: "HTML"
    content: '''
      You can add the fa-paper-plane Font Awesome icon by adding <i class="fa fa-paper-plane"></i> within your submit button element.
      Give your form's text input field a class of "form-control". Give your form's submit button the classes btn btn-primary. Also give this button the Font Awesome icon of fa-paper-plane.
      
      <!--form-conrol makes the inut column to the size of the page.-->
      
      <input class="form-control" type="text" placeholder="cat photo URL" required>
          <button class="btn btn-primary" type="submit"><i class="fa fa-paper-plane">Submit</i></button>
    '''
  }
  {
    name: "Headline"
    mode: "Plain Text"
    content: ""
  }
]
tags: []
isStarred: false
isTrashed: false
