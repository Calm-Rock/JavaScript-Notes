createdAt: "2018-05-05T07:51:19.882Z"
updatedAt: "2018-05-06T01:29:41.101Z"
type: "SNIPPET_NOTE"
folder: "8121e771b5582b371f1f"
title: "Java Script 4"
description: "Java Script 4"
snippets: [
  {
    name: "Build Objects"
    mode: "text"
    content: '''
      // Objects are similar to arrays, except that instead of using indexes to access and modify their //data, you access the data in objects through what are called properties.
      
      Here's a sample object:
      var cat = {
        "name": "Whiskers",
        "legs": 4,
        "tails": 1,
        "enemies": ["Water", "Dogs"]
      };   // Objects can contain arrays.
      
      Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.
      
      
    '''
  }
  {
    name: "Accessing object properties"
    mode: "Plain Text"
    content: '''
      //There are two ways to access the properties of an object: the dot operator (.) and bracket notation ([]), similar to an array.
      
      // DOT OPERATOR
      
      //The dot operator is what you use when you know the name of the property you're trying to access ahead of time.
      //Here is a sample of using the dot operator (.) to read an object property:
      var myObj = {
        prop1: "val1",
        prop2: "val2"
      };
      var prop1val = myObj.prop1; // val1
      var prop2val = myObj.prop2; // val2
      
      
      
      
      
      //BRACKET NOTATION
      
      The second way to access the properties of an object is bracket notation ([]). 
      If the property of the object you are trying to access has a space in it, you will need to use bracket notation.
      Here is a sample of using bracket notation to read an object property:
      
      var myObj = {
        "Space Name": "Kirk",
        "More Space": "Spock"
      };
      
      myObj["Space Name"]; // Kirk
      myObj['More Space']; // Spock
      
      Note that property names with spaces in them must be in quotes (single or double).
      
    '''
  }
  {
    name: "Accessing obj prop with variables"
    mode: "Plain Text"
    content: '''
      //Another use of bracket notation on objects is to use a variable to access a property. This can be very useful for iterating through lists of the object properties or for doing the lookup.
      
      Here is an example of using a variable to access a property:
      
      var someProp = "propName";
      var myObj = {
        propName: "Some Value"
      }
      myObj[someProp]; // "Some Value"
      
      Here is one more:
      
      var myDog = "Hunter";
      var dogs = {
        Fido: "Mutt",
        Hunter: "Doberman",
        Snoopie: "Beagle"
      }
      var breed = dogs[myDog];
      console.log(breed);// "Doberman"
      
      Note that we do not use quotes around the variable name when using it to access the property because we are using the value of the variable, not the name
    '''
  }
  {
    name: ".Updating obj prop"
    mode: "Plain Text"
    content: '''
      //After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.
      
      For example, let's look at ourDog:
      
      var ourDog = {
        "name": "Camper",
        "legs": 4,
        "tails": 1,
        "friends": ["everything!"]
      };
      
      Since he's a particularly happy dog, let's change his name to "Happy Camper". Here's how we update his object's name property:
      
      ourDog.name = "Happy Camper"; 
      or
      ourDog["name"] = "Happy Camper";
      
      Now when we evaluate ourDog.name, instead of getting "Camper", we'll get his new name, "Happy Camper".
    '''
  }
  {
    name: "Adding and deleting prop to obj"
    mode: "Plain Text"
    content: '''
      //ADDING PROPERTIES
      
      You can add new properties to existing JavaScript objects the same way you would modify them.
      
      Here's how we would add a "bark" property to ourDog:
      
      ourDog.bark = "bow-wow"; 
      or
      ourDog["bark"] = "bow-wow";
      
      Now when we evaluate ourDog.bark, we'll get his bark, "bow-wow".
      
      
      
      
      //DELETING PROPERTIES
      
      We can also delete properties from objects like this:
      
      delete ourDog.bark;
      
    '''
  }
  {
    name: "Using obj for lookups"
    mode: "Plain Text"
    content: '''
      Convert the switch statement into a lookup table called lookup. Use it to lookup val and assign the associated string to the result variable.
      
      
      //ORIGINAL CODE
      // Setup
      function phoneticLookup(val) {
        var result = "";
      
        // Only change code below this line
        switch(val) {
          case "alpha": 
            result = "Adams";
            break;
          case "bravo": 
            result = "Boston";
            break;
          case "charlie": 
            result = "Chicago";
            break;
          case "delta": 
            result = "Denver";
            break;
          case "echo": 
            result = "Easy";
            break;
          case "foxtrot": 
            result = "Frank";
        }
      
        // Only change code above this line
        return result;
      }
      
      // Change this value to test
      phoneticLookup("charlie");
      
      
      
      //SOLUTION
      
      // Setup
      function phoneticLookup(val) {
        var result = "";
      
        // Only change code below this line
        
        var lookup = {
         
           "alpha" : "Adams",
           "bravo" : "Boston",
           "charlie" : "Chicago",
           "delta" : "Denver",
           "echo" : "Easy",
           "foxtrot" : "Frank",
           "" : undefined
         };
        result = lookup[val];  // USE [ ] WHILE ACCESSING PROPERTIES USING VARIABLES.
      
        // Only change code above this line
        return result;
        
      }
      // Change this value to test
      phoneticLookup("charlie");
    '''
  }
  {
    name: "Testing objects for properties"
    mode: "Plain Text"
    content: '''
      Sometimes it is useful to check if the property of a given object exists or not. We can use the .hasOwnProperty(propname) method of objects to determine if that object has the given property name. .hasOwnProperty() returns true or false if the property is found or not.
      Example
      var myObj = {
        top: "hat",
        bottom: "pants"
      };
      myObj.hasOwnProperty("top");    // true
      myObj.hasOwnProperty("middle"); // false
      
      
      Instructions
      Modify the function checkObj to test myObj for checkProp. If the property is found, return that property's value. If not, return "Not Found".
      
      //SOLUTION
      
      
      // Setup
      var myObj = {
        gift: "pony",
        pet: "kitten",
        bed: "sleigh"
      };
      
      function checkObj(checkProp) {
        if(myObj.hasOwnProperty(checkProp) == true ){
          var myVar = myObj[checkProp]; // USE [ ] WHILE ACCESSING PROPERTIES USING VARIABLES.
        return myVar;
        }
        else{
          return "Not Found";
        }
      }
      
      // Test your code by modifying these values
      checkObj("gift");
      
    '''
  }
  {
    name: "Manipulating complex obj"
    mode: "Plain Text"
    content: '''
      //Sometimes you may want to store data in a flexible Data Structure. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.
      
      Here's an example of a complex data structure:
      
      var ourMusic = [
        {
          "artist": "Daft Punk",
          "title": "Homework",
          "release_year": 1997,
          "formats": [ 
            "CD", 
            "Cassette", 
            "LP" ],
          "gold": true
        }
      ];
      
      This is an array which contains one object inside. The object has various pieces of metadata about an album. It also has a nested "formats" array. If you want to add more album records, you can do this by adding records to the top level array.
      
      Objects hold data in a property, which has a key-value format. In the example above, "artist": "Daft Punk" is a property that has a key of "artist" and a value of "Daft Punk".
      
      JavaScript Object Notation or JSON is a related data interchange format used to store data.
      
      {
        "artist": "Daft Punk",
        "title": "Homework",
        "release_year": 1997,
        "formats": [ 
          "CD",
          "Cassette",
          "LP"
        ],
        "gold": true
      }
      
      Note
      You will need to place a comma after every object in the array, unless it is the last object in the array.
    '''
  }
  {
    name: "Accessing nested obj"
    mode: "Plain Text"
    content: '''
      // The sub-properties of objects can be accessed by chaining together the dot or bracket notation.
      
      Here is a nested object:
      
      var ourStorage = {
        "desk": {
          "drawer": "stapler"
        },
        "cabinet": {
          "top drawer": { 
            "folder1": "a file",
            "folder2": "secrets"
          },
          "bottom drawer": "soda"
        }
      };
      ourStorage.cabinet["top drawer"].folder2;  // "secrets"
      ourStorage.desk.drawer; // "stapler"
    '''
  }
  {
    name: "Accessing nested arrays"
    mode: "Plain Text"
    content: '''
      //Here is a nested object:
      var ourStorage = {
        "desk": {
          "drawer": "stapler"
        },
        "cabinet": {
          "top drawer": { 
            "folder1": "a file",
            "folder2": "secrets"
          },
          "bottom drawer": "soda"
        }
      };
      ourStorage.cabinet["top drawer"].folder2;  // "secrets"
      ourStorage.desk.drawer; // "stapler"
      
    '''
  }
  {
    name: "For loops in JS"
    mode: "Plain Text"
    content: '''
      //You can run the same code multiple times by using a loop.
      The most common type of JavaScript loop is called a "for loop" because it runs "for" a specific number of times.
      For loops are declared with three optional expressions separated by semicolons:
      
      for ([initialization]; [condition]; [final-expression])
      
      The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.
      
      The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to true. When condition is false at the start of the iteration, the loop will stop executing. This means if condition starts as false, your loop will never execute.
      
      The final-expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.
      
      
      In the following example we initialize with i = 0 and iterate while our condition i < 5 is true. We'll increment i by 1 in each loop iteration with i++ as our final-expression.
      
      var ourArray = [];
      for (var i = 0; i < 5; i++) {
        ourArray.push(i);
        
        ourArray will now contain [0,1,2,3,4].
      
    '''
  }
  {
    name: "Iterate odd numbers with for loops"
    mode: "Plain Text"
    content: '''
      //For loops don't have to iterate one at a time. By changing our final-expression, we can count by even numbers.
      We'll start at i = 0 and loop while i < 10. We'll increment i by 2 each loop with i += 2.
      var ourArray = [];
      for (var i = 0; i < 10; i += 2) {
        ourArray.push(i);
      }
      ourArray will now contain [0,2,4,6,8].
      
    '''
  }
  {
    name: "Count backwards with for loops"
    mode: "Plain Text"
    content: '''
      A for loop can also count backwards, so long as we can define the right conditions.
      In order to count backwards by twos, we'll need to change our initialization, condition, and final-expression.
      We'll start at i = 10 and loop while i > 0. We'll decrement i by 2 each loop with i -= 2.
      var ourArray = [];
      for (var i=10; i > 0; i-=2) {
        ourArray.push(i);
      }
      ourArray will now contain [10,8,6,4,2].
    '''
  }
  {
    name: "Iterate through an array with for loop"
    mode: "Plain Text"
    content: '''
      //A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a for loop. This code will output each element of the array arr to the console:
      
      var arr = [10,9,8,7,6];
      for (var i=0; i < arr.length; i++) {
         console.log(arr[i]);
      }
      
      Remember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our condition for this loop is i < arr.length, which stops when i is at length - 1.
      
      
      
      Instructions
      Declare and initialize a variable total to 0. Use a for loop to add the value of each element of the myArr array to total.
      
      var myArr = [ 2, 3, 4, 5, 6];
      
      // Only change code below this line
      var total = 0;
      for(i = 0; i < myArr.length; i++){
        total += myArr[i];
      }
    '''
  }
  {
    name: "Nesting for loops"
    mode: "Plain Text"
    content: '''
      //If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays.
      
      Here is an example:
      
      var arr = [
        [1,2], [3,4], [5,6]
      ];
      for (var i=0; i < arr.length; i++) {
        for (var j=0; j < arr[i].length; j++) {
          console.log(arr[i][j]);
        }
      }
      
      This outputs each sub-element in arr one at a time. Note that for the inner loop, we are checking the .length of arr[i], since arr[i] is itself an array.
    '''
  }
  {
    name: "While loops"
    mode: "Plain Text"
    content: '''
      //You can run the same code multiple times by using a loop.
      
      Another type of JavaScript loop is called a "while loop", because it runs "while" a specified condition is true and stops once that condition is no longer true.
      
      var ourArray = [];
      var i = 0;
      while(i < 5) {
        ourArray.push(i);
        i++;
      }
    '''
  }
  {
    name: "Raandom fractions with JS"
    mode: "Plain Text"
    content: '''
      Random numbers are useful for creating random behavior.
      JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and not quite up to 1 (exclusive). Thus Math.random() can return a 0 but never quite return a 1
      Note
      Like Storing Values with the Equal Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function.
      
    '''
  }
  {
    name: "Generate random Whole Numbers"
    mode: "Plain Text"
    content: '''
      //It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.
      
      Use Math.random() to generate a random decimal.
      Multiply that random decimal by 20.
      Use another function, Math.floor() to round the number down to its nearest whole number.
      
      Remember that Math.random() can never quite return a 1 and, because we're rounding down, it's impossible to actually get 20. This technique will give us a whole number between 0 and 19.
      
      Putting everything together, this is what our code looks like:
      Math.floor(Math.random() * 20);
      
      
    '''
  }
  {
    name: "Random whole number within a range"
    mode: "Plain Text"
    content: '''
      //RANDOM WHOLE NUMBER WITHIN A RANGE
      
      Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.
      To do this, we'll define a minimum number min and a maximum number max.
      
      Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:
      
      Math.floor(Math.random() * (max - min + 1)) + min
    '''
  }
  {
    name: "Sift through text"
    mode: "Plain Text"
    content: '''
      //Sift through Text with Regular Expressions
      
      
      Regular expressions are used to find certain words or patterns inside of strings.
      
      For example, if we wanted to find the word the in the string The dog chased the cat, we could use the following regular expression: /the/gi
      
      Let's break this down a bit:
      
      / is the start of the regular expression.
      
      the is the pattern we want to match.
      
      / is the end of the regular expression.
      
      g means global, which causes the pattern to return all matches in the string, not just the first one.
      
      i means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.
      
      Instructions
      Select all the occurrences of the word and in testString.
      You can do this by replacing the . part of the regular expression with the word and.
      
      var testString = "Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.";
      
      var expression = /and/gi;  
      var andCount = testString.match(expression).length;
      
    '''
  }
  {
    name: "Find Numbers with RegEx"
    mode: "Plain Text"
    content: '''
      //Find Numbers with Regular Expressions
      
      
      We can use special selectors in Regular Expressions to select a particular type of value.
      
      One such selector is the digit selector \\d which is used to retrieve one digit (e.g. numbers 0 to 9) 
      "in a string".
      
      In JavaScript, it is used like this: /\\d/g.
      Appending a plus sign (+) after the selector, 
      e.g. /\\d+/g, allows this regular expression to match one or more digits.
      
      The trailing g is short for 'global', which allows this regular expression to find all matches rather than stop at the first match.
      
    '''
  }
  {
    name: "Find Whitespace with Regular Expressions"
    mode: "Plain Text"
    content: '''
      // Find Whitespace with Regular Expressions
      
      We can also use regular expression selectors like \\s to find whitespace in a string.
      
      The whitespace characters are " " (space), 
      \\r (the carriage return), 
      \\n (newline), 
      \\t (tab), and
      \\f (the form feed).
      
      The whitespace regular expression looks like this:
      /\\s+/g
    '''
  }
  {
    name: "Invert Regular Expression Matches with JavaScript"
    mode: "Plain Text"
    content: '''
      // Invert Regular Expression Matches with JavaScript
      
      You can invert any match by using the uppercase version of the regular expression selector.
      
      For example, \\s will match any whitespace, and \\S will match anything that isn't whitespace.
      
      Instructions
      Use /\\S/g to count the number of non-whitespace characters in testString.
      
      var testString = "How many non-space characters are there in this sentence?";
      var expression = /\\S/g;  //  "\\S+ is not used"
      var nonSpaceCount = testString.match(expression).length;
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
