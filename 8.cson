createdAt: "2018-04-25T17:16:33.704Z"
updatedAt: "2018-04-26T15:04:06.972Z"
type: "SNIPPET_NOTE"
folder: "8121e771b5582b371f1f"
title: "Second"
description: "Second"
snippets: [
  {
    name: "Links"
    mode: "HTML"
    content: '''
      <!--a is called anchor element
      It is used to link content outside the current page-->
      
      <a href = "https://freecodecamp.org">This is the awesome site</a>
      
      <!--It can also be used in between other elements #nesting-->
      
      <p>This is the link to <a href = "https://freecodecamp.org">an awesome website</a>
       </p>
      
      Putting one element inside another is called as "nesting".
      
      Make a dead link by setting href = #
      <!--Sometimes you want to add "a" elements to your website before you know where they will link.
      This is also handy when you're changing the behavior of a link using jQuery, which we'll learn about later.-->
      
      <!--Nesting an element inside "a" tag so as to make them a link-->
      <a href="#"><img src="https://bit.ly/fcc-running-cats" alt="Three kittens running towards the camera. "></a>
      
      
    '''
  }
  {
    name: "lists"
    mode: "HTML"
    content: '''
      <!--Bullet point style lists or unordered lists-->
      
      <ul>
        <li>milk</li>
        <li>cheese</li>
      </ul>
      
      
      <!--Ordered lists or numbered lists-->
      
      <ol>
        <li>milk</li>
        <li>cheese</li>
      </ol>
    '''
  }
  {
    name: "webform"
    mode: "HTML"
    content: '''
      <input type="text">
      
      <!--placeholder text is what appears in your text input before your user has input anything.-->
      
      <input type="text" placeholder="this is placeholder text">
      
      
      <!--You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your form element.
      For example:-->
      <form action="/url-where-you-want-to-submit-form-data"></form>
      
      <!--Clicking this button will send the data from your form to the URL you specified with your form's action attribute.
      submit button:   -->
      <button type="submit">this button submits the form</button>
      
      <!--if you wanted to make a text input field required, you can just add the word required within your input element, you would use:  -->
      <input type="text" required>
      
      <!--You can use radio buttons for questions where you want the user to only give you one answer.
      Radio buttons are a type of input
      Each of your radio buttons should be nested within its own label element.
      All related radio buttons should have the same name attribute. -->
      
      <label><input type="radio" name="indoor-outdoor"> Indoor</label>
      
      <!--Forms commonly use checkboxes for questions that may have more than one answer.
      Checkboxes are a type of input
      Each of your checkboxes should be nested within its own label element.
      All related checkbox inputs should have the same name attribute.
      Here's an example of a checkbox: -->
      <label><input type="checkbox" name="personality"> Loving</label>
      
      <!--You can set a checkbox or radio button to be checked by default using the checked attribute.
      To do this, just add the word "checked" to the inside of an input element. For example: -->
      <input type="radio" name="test-name" checked>
      
    '''
  }
  {
    name: "div element"
    mode: "HTML"
    content: '''
      <!--The div element, also known as a division element, is a general purpose container for other elements.It's useful for passing the CSS of its own class declarations down to all the elements that it contains. -->
      
      <!--to set an elements background color, we use-->
      background-color
      
      
      
      
    '''
  }
  {
    name: "id"
    mode: "HTML"
    content: '''
      <!--In addition to classes, each HTML element can also have an id attribute.
      id attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same id attribute.
      Here's an example of how you give your h2 element the id of cat-photo-app: -->
      <h2 id="cat-photo-app">
        
        
        <!-- id attributes just like classes can be styled using CSS -->
        #cat-photo-element {
        background-color: green;
      }
        
        You always reference ids by putting a # in front of their names.
        
        
        
        
        
        
        
        
        
        
    '''
  }
  {
    name: "padding"
    mode: "HTML"
    content: '''
      
      <style>
        .injected-text {
          margin-bottom: -25px;
          text-align: center;
        }
      
        .box {
          border-style: solid;
          border-color: black;
          border-width: 5px;
          text-align: center;
        }
      
        .yellow-box {
          background-color: yellow;
          padding: 10px;
        }
        
        .red-box {
          background-color: red;
          padding: 20px;
        }
      
        .green-box {
          background-color: green;
          padding: 20px;
        }
      </style>
      
      
      Sometimes you will want to customize an element so that it has different padding on each of its sides.
      CSS allows you to control the padding of an element on all four sides with 
      padding-top, padding-right, padding-bottom, and padding-left properties.
      
      padding: 10px 20px 10px 20px;
      These four values work like a clock: 
      top, right, bottom, left
      and will produce the exact same result as using the side-specific padding instructions.
      
      padding: 10px 20px 10px 20px;
      
    '''
  }
  {
    name: "margin"
    mode: "HTML"
    content: '''
      An element's margin controls the amount of space between an element's border and surrounding elements.
      
      .green-box {
          background-color: green;
          padding: 20px;
          margin: 20px;
        }
      
      
      If you set an element's margin to a negative value, the element will grow larger.
      
      Sometimes you will want to customize an element so that it has a different margin on each of its sides.
      CSS allows you to control the margin of an element on all four sides with 
      margin-top, margin-right, margin-bottom, and margin-left properties.
      
      
      margin: 10px 20px 10px 20px;
      These four values work like a clock: top, right, bottom, left.
    '''
  }
  {
    name: "general"
    mode: "HTML"
    content: '''
      Every HTML page has a body element. Body element can also be styled with CSS.
      
      You can style your body element just like any other HTML element, and all your other elements will inherit your body element's styles.
      
      
      
      Our "pink-text" class overrode our body element's CSS declaration!
      our classes will override the body element's CSS
      
      
      Note: It doesn't matter which order the classes are listed in the HTML element.
      However, the order of the class declarations in the <style> section are what is important. The second declaration will always take precedence over the first. Because .blue-text is declared second, it overrides the attributes of .pink-text
      
      Browsers read CSS from top to bottom.
      That means that, in the event of a conflict, the browser will use whichever CSS declaration came last.
      
      
      It doesn't matter whether you declare this css above or below pink-text class, since id attribute will always take precedence.
      It doesn't matter whether you declare this css above or below pink-text class, since id attribute will always take precedence
      id declarations override class declarations, regardless of where they are declared in your style element CSS.
      
      There are other ways that you can override CSS.
      in-line style to try to make our h1 element white. Remember, in line styles look like this:
      <h1 style="color: green">
      
      
        In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use 
        ""!important""
        
       
        
        
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    '''
  }
  {
    name: "colouring ways"
    mode: "HTML"
    content: '''
      <!--  0 to F can represent a digit in hexadecimal, giving us 16 total possible values. 
        
       In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black
       
       
       From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!
      For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being #FFA500.
      
      The digit 0 is the lowest number in hex code, and represents a complete absence of color.
      The digit F is the highest number in hex code, and represents the maximum possible brightness.-->
      
      
      Another way you can represent colors in CSS is by using RGB values.
      The RGB value for black looks like this:
      rgb(0, 0, 0)
      The RGB value for white looks like this:
      rgb(255, 255, 255)
    '''
  }
]
tags: [
  "Links"
  "lists"
  "webform"
  "div"
  "id"
  "padding"
  "margin"
  "body"
  "hexadecimals"
  "rgb"
]
isStarred: false
isTrashed: false
